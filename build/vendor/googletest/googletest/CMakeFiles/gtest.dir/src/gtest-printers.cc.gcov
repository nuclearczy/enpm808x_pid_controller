        -:    0:Source:/home/ashwin/Academics/enpm_808x/git_cloned/enpm808x_pid_controller/vendor/googletest/googletest/src/gtest-printers.cc
        -:    0:Graph:/home/ashwin/Academics/enpm_808x/git_cloned/enpm808x_pid_controller/build/vendor/googletest/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcno
        -:    0:Data:/home/ashwin/Academics/enpm_808x/git_cloned/enpm808x_pid_controller/build/vendor/googletest/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:// Copyright 2007, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29://
        -:   30:// Author: wan@google.com (Zhanyong Wan)
        -:   31:
        -:   32:// Google Test - The Google C++ Testing Framework
        -:   33://
        -:   34:// This file implements a universal value printer that can print a
        -:   35:// value of any type T:
        -:   36://
        -:   37://   void ::testing::internal::UniversalPrinter<T>::Print(value, ostream_ptr);
        -:   38://
        -:   39:// It uses the << operator when possible, and prints the bytes in the
        -:   40:// object otherwise.  A user can override its behavior for a class
        -:   41:// type Foo by defining either operator<<(::std::ostream&, const Foo&)
        -:   42:// or void PrintTo(const Foo&, ::std::ostream*) in the namespace that
        -:   43:// defines Foo.
        -:   44:
        -:   45:#include "gtest/gtest-printers.h"
        -:   46:#include <ctype.h>
        -:   47:#include <stdio.h>
        -:   48:#include <cwchar>
        -:   49:#include <ostream>  // NOLINT
        -:   50:#include <string>
        -:   51:#include "gtest/internal/gtest-port.h"
        -:   52:
        -:   53:namespace testing {
        -:   54:
        -:   55:namespace {
        -:   56:
        -:   57:using ::std::ostream;
        -:   58:
        -:   59:// Prints a segment of bytes in the given object.
        -:   60:GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_
        -:   61:GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_
        -:   62:GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_
    #####:   63:void PrintByteSegmentInObjectTo(const unsigned char* obj_bytes, size_t start,
        -:   64:                                size_t count, ostream* os) {
    #####:   65:  char text[5] = "";
    #####:   66:  for (size_t i = 0; i != count; i++) {
    #####:   67:    const size_t j = start + i;
    #####:   68:    if (i != 0) {
        -:   69:      // Organizes the bytes into groups of 2 for easy parsing by
        -:   70:      // human.
    #####:   71:      if ((j % 2) == 0)
    #####:   72:        *os << ' ';
        -:   73:      else
    #####:   74:        *os << '-';
        -:   75:    }
    #####:   76:    GTEST_SNPRINTF_(text, sizeof(text), "%02X", obj_bytes[j]);
    #####:   77:    *os << text;
        -:   78:  }
    #####:   79:}
        -:   80:
        -:   81:// Prints the bytes in the given value to the given ostream.
    #####:   82:void PrintBytesInObjectToImpl(const unsigned char* obj_bytes, size_t count,
        -:   83:                              ostream* os) {
        -:   84:  // Tells the user how big the object is.
    #####:   85:  *os << count << "-byte object <";
        -:   86:
    #####:   87:  const size_t kThreshold = 132;
    #####:   88:  const size_t kChunkSize = 64;
        -:   89:  // If the object size is bigger than kThreshold, we'll have to omit
        -:   90:  // some details by printing only the first and the last kChunkSize
        -:   91:  // bytes.
        -:   92:  // TODO(wan): let the user control the threshold using a flag.
    #####:   93:  if (count < kThreshold) {
    #####:   94:    PrintByteSegmentInObjectTo(obj_bytes, 0, count, os);
        -:   95:  } else {
    #####:   96:    PrintByteSegmentInObjectTo(obj_bytes, 0, kChunkSize, os);
    #####:   97:    *os << " ... ";
        -:   98:    // Rounds up to 2-byte boundary.
    #####:   99:    const size_t resume_pos = (count - kChunkSize + 1)/2*2;
    #####:  100:    PrintByteSegmentInObjectTo(obj_bytes, resume_pos, count - resume_pos, os);
        -:  101:  }
    #####:  102:  *os << ">";
    #####:  103:}
        -:  104:
        -:  105:}  // namespace
        -:  106:
        -:  107:namespace internal2 {
        -:  108:
        -:  109:// Delegates to PrintBytesInObjectToImpl() to print the bytes in the
        -:  110:// given object.  The delegation simplifies the implementation, which
        -:  111:// uses the << operator and thus is easier done outside of the
        -:  112:// ::testing::internal namespace, which contains a << operator that
        -:  113:// sometimes conflicts with the one in STL.
    #####:  114:void PrintBytesInObjectTo(const unsigned char* obj_bytes, size_t count,
        -:  115:                          ostream* os) {
    #####:  116:  PrintBytesInObjectToImpl(obj_bytes, count, os);
    #####:  117:}
        -:  118:
        -:  119:}  // namespace internal2
        -:  120:
        -:  121:namespace internal {
        -:  122:
        -:  123:// Depending on the value of a char (or wchar_t), we print it in one
        -:  124:// of three formats:
        -:  125://   - as is if it's a printable ASCII (e.g. 'a', '2', ' '),
        -:  126://   - as a hexidecimal escape sequence (e.g. '\x7F'), or
        -:  127://   - as a special escape sequence (e.g. '\r', '\n').
        -:  128:enum CharFormat {
        -:  129:  kAsIs,
        -:  130:  kHexEscape,
        -:  131:  kSpecialEscape
        -:  132:};
        -:  133:
        -:  134:// Returns true if c is a printable ASCII character.  We test the
        -:  135:// value of c directly instead of calling isprint(), which is buggy on
        -:  136:// Windows Mobile.
    #####:  137:inline bool IsPrintableAscii(wchar_t c) {
    #####:  138:  return 0x20 <= c && c <= 0x7E;
        -:  139:}
        -:  140:
        -:  141:// Prints a wide or narrow char c as a character literal without the
        -:  142:// quotes, escaping it when necessary; returns how c was formatted.
        -:  143:// The template argument UnsignedChar is the unsigned version of Char,
        -:  144:// which is the type of c.
        -:  145:template <typename UnsignedChar, typename Char>
    #####:  146:static CharFormat PrintAsCharLiteralTo(Char c, ostream* os) {
    #####:  147:  switch (static_cast<wchar_t>(c)) {
        -:  148:    case L'\0':
    #####:  149:      *os << "\\0";
    #####:  150:      break;
        -:  151:    case L'\'':
    #####:  152:      *os << "\\'";
    #####:  153:      break;
        -:  154:    case L'\\':
    #####:  155:      *os << "\\\\";
    #####:  156:      break;
        -:  157:    case L'\a':
    #####:  158:      *os << "\\a";
    #####:  159:      break;
        -:  160:    case L'\b':
    #####:  161:      *os << "\\b";
    #####:  162:      break;
        -:  163:    case L'\f':
    #####:  164:      *os << "\\f";
    #####:  165:      break;
        -:  166:    case L'\n':
    #####:  167:      *os << "\\n";
    #####:  168:      break;
        -:  169:    case L'\r':
    #####:  170:      *os << "\\r";
    #####:  171:      break;
        -:  172:    case L'\t':
    #####:  173:      *os << "\\t";
    #####:  174:      break;
        -:  175:    case L'\v':
    #####:  176:      *os << "\\v";
    #####:  177:      break;
        -:  178:    default:
    #####:  179:      if (IsPrintableAscii(c)) {
    #####:  180:        *os << static_cast<char>(c);
    #####:  181:        return kAsIs;
        -:  182:      } else {
    #####:  183:        *os << "\\x" + String::FormatHexInt(static_cast<UnsignedChar>(c));
    #####:  184:        return kHexEscape;
        -:  185:      }
        -:  186:  }
    #####:  187:  return kSpecialEscape;
        -:  188:}
        -:  189:
        -:  190:// Prints a wchar_t c as if it's part of a string literal, escaping it when
        -:  191:// necessary; returns how c was formatted.
    #####:  192:static CharFormat PrintAsStringLiteralTo(wchar_t c, ostream* os) {
    #####:  193:  switch (c) {
        -:  194:    case L'\'':
    #####:  195:      *os << "'";
    #####:  196:      return kAsIs;
        -:  197:    case L'"':
    #####:  198:      *os << "\\\"";
    #####:  199:      return kSpecialEscape;
        -:  200:    default:
    #####:  201:      return PrintAsCharLiteralTo<wchar_t>(c, os);
        -:  202:  }
        -:  203:}
        -:  204:
        -:  205:// Prints a char c as if it's part of a string literal, escaping it when
        -:  206:// necessary; returns how c was formatted.
    #####:  207:static CharFormat PrintAsStringLiteralTo(char c, ostream* os) {
    #####:  208:  return PrintAsStringLiteralTo(
    #####:  209:      static_cast<wchar_t>(static_cast<unsigned char>(c)), os);
        -:  210:}
        -:  211:
        -:  212:// Prints a wide or narrow character c and its code.  '\0' is printed
        -:  213:// as "'\\0'", other unprintable characters are also properly escaped
        -:  214:// using the standard C++ escape sequence.  The template argument
        -:  215:// UnsignedChar is the unsigned version of Char, which is the type of c.
        -:  216:template <typename UnsignedChar, typename Char>
    #####:  217:void PrintCharAndCodeTo(Char c, ostream* os) {
        -:  218:  // First, print c as a literal in the most readable form we can find.
    #####:  219:  *os << ((sizeof(c) > 1) ? "L'" : "'");
    #####:  220:  const CharFormat format = PrintAsCharLiteralTo<UnsignedChar>(c, os);
    #####:  221:  *os << "'";
        -:  222:
        -:  223:  // To aid user debugging, we also print c's code in decimal, unless
        -:  224:  // it's 0 (in which case c was printed as '\\0', making the code
        -:  225:  // obvious).
    #####:  226:  if (c == 0)
    #####:  227:    return;
    #####:  228:  *os << " (" << static_cast<int>(c);
        -:  229:
        -:  230:  // For more convenience, we print c's code again in hexidecimal,
        -:  231:  // unless c was already printed in the form '\x##' or the code is in
        -:  232:  // [1, 9].
    #####:  233:  if (format == kHexEscape || (1 <= c && c <= 9)) {
        -:  234:    // Do nothing.
        -:  235:  } else {
    #####:  236:    *os << ", 0x" << String::FormatHexInt(static_cast<UnsignedChar>(c));
        -:  237:  }
    #####:  238:  *os << ")";
        -:  239:}
        -:  240:
    #####:  241:void PrintTo(unsigned char c, ::std::ostream* os) {
    #####:  242:  PrintCharAndCodeTo<unsigned char>(c, os);
    #####:  243:}
    #####:  244:void PrintTo(signed char c, ::std::ostream* os) {
    #####:  245:  PrintCharAndCodeTo<unsigned char>(c, os);
    #####:  246:}
        -:  247:
        -:  248:// Prints a wchar_t as a symbol if it is printable or as its internal
        -:  249:// code otherwise and also as its code.  L'\0' is printed as "L'\\0'".
    #####:  250:void PrintTo(wchar_t wc, ostream* os) {
    #####:  251:  PrintCharAndCodeTo<wchar_t>(wc, os);
    #####:  252:}
        -:  253:
        -:  254:// Prints the given array of characters to the ostream.  CharType must be either
        -:  255:// char or wchar_t.
        -:  256:// The array starts at begin, the length is len, it may include '\0' characters
        -:  257:// and may not be NUL-terminated.
        -:  258:template <typename CharType>
        -:  259:GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_
        -:  260:GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_
        -:  261:GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_
    #####:  262:static void PrintCharsAsStringTo(
        -:  263:    const CharType* begin, size_t len, ostream* os) {
    #####:  264:  const char* const kQuoteBegin = sizeof(CharType) == 1 ? "\"" : "L\"";
    #####:  265:  *os << kQuoteBegin;
    #####:  266:  bool is_previous_hex = false;
    #####:  267:  for (size_t index = 0; index < len; ++index) {
    #####:  268:    const CharType cur = begin[index];
    #####:  269:    if (is_previous_hex && IsXDigit(cur)) {
        -:  270:      // Previous character is of '\x..' form and this character can be
        -:  271:      // interpreted as another hexadecimal digit in its number. Break string to
        -:  272:      // disambiguate.
    #####:  273:      *os << "\" " << kQuoteBegin;
        -:  274:    }
    #####:  275:    is_previous_hex = PrintAsStringLiteralTo(cur, os) == kHexEscape;
        -:  276:  }
    #####:  277:  *os << "\"";
    #####:  278:}
        -:  279:
        -:  280:// Prints a (const) char/wchar_t array of 'len' elements, starting at address
        -:  281:// 'begin'.  CharType must be either char or wchar_t.
        -:  282:template <typename CharType>
        -:  283:GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_
        -:  284:GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_
        -:  285:GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_
    #####:  286:static void UniversalPrintCharArray(
        -:  287:    const CharType* begin, size_t len, ostream* os) {
        -:  288:  // The code
        -:  289:  //   const char kFoo[] = "foo";
        -:  290:  // generates an array of 4, not 3, elements, with the last one being '\0'.
        -:  291:  //
        -:  292:  // Therefore when printing a char array, we don't print the last element if
        -:  293:  // it's '\0', such that the output matches the string literal as it's
        -:  294:  // written in the source code.
    #####:  295:  if (len > 0 && begin[len - 1] == '\0') {
    #####:  296:    PrintCharsAsStringTo(begin, len - 1, os);
    #####:  297:    return;
        -:  298:  }
        -:  299:
        -:  300:  // If, however, the last element in the array is not '\0', e.g.
        -:  301:  //    const char kFoo[] = { 'f', 'o', 'o' };
        -:  302:  // we must print the entire array.  We also print a message to indicate
        -:  303:  // that the array is not NUL-terminated.
    #####:  304:  PrintCharsAsStringTo(begin, len, os);
    #####:  305:  *os << " (no terminating NUL)";
        -:  306:}
        -:  307:
        -:  308:// Prints a (const) char array of 'len' elements, starting at address 'begin'.
    #####:  309:void UniversalPrintArray(const char* begin, size_t len, ostream* os) {
    #####:  310:  UniversalPrintCharArray(begin, len, os);
    #####:  311:}
        -:  312:
        -:  313:// Prints a (const) wchar_t array of 'len' elements, starting at address
        -:  314:// 'begin'.
    #####:  315:void UniversalPrintArray(const wchar_t* begin, size_t len, ostream* os) {
    #####:  316:  UniversalPrintCharArray(begin, len, os);
    #####:  317:}
        -:  318:
        -:  319:// Prints the given C string to the ostream.
    #####:  320:void PrintTo(const char* s, ostream* os) {
    #####:  321:  if (s == NULL) {
    #####:  322:    *os << "NULL";
        -:  323:  } else {
    #####:  324:    *os << ImplicitCast_<const void*>(s) << " pointing to ";
    #####:  325:    PrintCharsAsStringTo(s, strlen(s), os);
        -:  326:  }
    #####:  327:}
        -:  328:
        -:  329:// MSVC compiler can be configured to define whar_t as a typedef
        -:  330:// of unsigned short. Defining an overload for const wchar_t* in that case
        -:  331:// would cause pointers to unsigned shorts be printed as wide strings,
        -:  332:// possibly accessing more memory than intended and causing invalid
        -:  333:// memory accesses. MSVC defines _NATIVE_WCHAR_T_DEFINED symbol when
        -:  334:// wchar_t is implemented as a native type.
        -:  335:#if !defined(_MSC_VER) || defined(_NATIVE_WCHAR_T_DEFINED)
        -:  336:// Prints the given wide C string to the ostream.
    #####:  337:void PrintTo(const wchar_t* s, ostream* os) {
    #####:  338:  if (s == NULL) {
    #####:  339:    *os << "NULL";
        -:  340:  } else {
    #####:  341:    *os << ImplicitCast_<const void*>(s) << " pointing to ";
    #####:  342:    PrintCharsAsStringTo(s, std::wcslen(s), os);
        -:  343:  }
    #####:  344:}
        -:  345:#endif  // wchar_t is native
        -:  346:
        -:  347:// Prints a ::string object.
        -:  348:#if GTEST_HAS_GLOBAL_STRING
        -:  349:void PrintStringTo(const ::string& s, ostream* os) {
        -:  350:  PrintCharsAsStringTo(s.data(), s.size(), os);
        -:  351:}
        -:  352:#endif  // GTEST_HAS_GLOBAL_STRING
        -:  353:
    #####:  354:void PrintStringTo(const ::std::string& s, ostream* os) {
    #####:  355:  PrintCharsAsStringTo(s.data(), s.size(), os);
    #####:  356:}
        -:  357:
        -:  358:// Prints a ::wstring object.
        -:  359:#if GTEST_HAS_GLOBAL_WSTRING
        -:  360:void PrintWideStringTo(const ::wstring& s, ostream* os) {
        -:  361:  PrintCharsAsStringTo(s.data(), s.size(), os);
        -:  362:}
        -:  363:#endif  // GTEST_HAS_GLOBAL_WSTRING
        -:  364:
        -:  365:#if GTEST_HAS_STD_WSTRING
    #####:  366:void PrintWideStringTo(const ::std::wstring& s, ostream* os) {
    #####:  367:  PrintCharsAsStringTo(s.data(), s.size(), os);
    #####:  368:}
        -:  369:#endif  // GTEST_HAS_STD_WSTRING
        -:  370:
        -:  371:}  // namespace internal
        -:  372:
        -:  373:}  // namespace testing
